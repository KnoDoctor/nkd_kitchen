generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         users_roles[]
  recipes       recipes[]
  comments      comments[]
  articles      articles[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model roles {
  role_id   String        @id @db.Uuid
  role_name String
  users     users_roles[]
}

model users_roles {
  users_roles_id String @id @db.Uuid
  user_id        String
  role_id        String @db.Uuid
  role           roles  @relation(fields: [role_id], references: [role_id])
  user           User   @relation(fields: [user_id], references: [id])
}

model people {
  person_id  String  @id @db.Uuid
  first_name String?
  last_name  String?
}

model recipes {
  recipe_id           String                @id @db.Uuid
  recipe_name         String
  recipe_image        String?
  recipe_description  String?
  cms_data            Json                  @default("[]")
  instructions        Json                  @default("[]")
  notes               Json                  @default("[]")
  user_id             String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  recipes_ingredients recipes_ingredients[]
  recipes_categories  recipes_categories[]
  comments            comments[]
  users               User                  @relation(fields: [user_id], references: [id])
  articles            articles[]            @relation("ArticleToRecipe")
}

model ingredients {
  ingredient_id           String                     @id @db.Uuid
  ingredient_name         String
  ingredient_image        String?
  created_at              DateTime                   @default(now())
  updated_at              DateTime                   @updatedAt
  recipes_ingredients     recipes_ingredients[]
  articles                articles[]                 @relation("ArticleToIngredient")
  substituted_ingredient  ingredient_substitutions[] @relation("SubstitutedIngredient")
  substituting_ingredient ingredient_substitutions[] @relation("SubstitutingIngredient")
}

model recipes_ingredients {
  recipe_id     String      @db.Uuid
  ingredient_id String      @db.Uuid
  quantity      Float?
  unit          String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  recipes       recipes     @relation(fields: [recipe_id], references: [recipe_id])
  ingredients   ingredients @relation(fields: [ingredient_id], references: [ingredient_id])

  @@id([recipe_id, ingredient_id])
  @@unique([recipe_id, ingredient_id])
}

model categories {
  category_id        String               @id @db.Uuid
  category_name      String
  category_image     String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  recipes_categories recipes_categories[]
}

model recipes_categories {
  recipe_id   String     @db.Uuid
  category_id String     @db.Uuid
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  recipes     recipes    @relation(fields: [recipe_id], references: [recipe_id])
  categories  categories @relation(fields: [category_id], references: [category_id])

  @@id([recipe_id, category_id])
  @@unique([recipe_id, category_id])
}

model comments {
  comment_id String   @id @db.Uuid
  recipe_id  String   @db.Uuid
  user_id    String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  recipes    recipes  @relation(fields: [recipe_id], references: [recipe_id])
  users      User     @relation(fields: [user_id], references: [id])
}

model articles {
  article_id            String        @id @db.Uuid
  article_name          String
  article_lookup_string String
  article_description   String?
  cms_data              Json          @default("[]")
  article_prompt        String?
  article_ai_response   String?
  article_hero_image    String?
  user_id               String
  is_published          Boolean       @default(false)
  users                 User          @relation(fields: [user_id], references: [id])
  recipes               recipes[]     @relation("ArticleToRecipe")
  ingredients           ingredients[] @relation("ArticleToIngredient")
}

model pages {
  page_id            String  @id @db.Uuid
  page_name          String  @db.VarChar(150)
  page_description   String?
  page_hero_image    String?
  cms_data           Json    @default("[]")
  page_lookup_string String  @db.VarChar(500)
  is_published       Boolean @default(false)
}

model modules {
  module_id    String  @id @db.Uuid
  module_name  String  @db.VarChar(150)
  module_image String? @db.VarChar(150)
  module_slug  String  @db.VarChar(150)
}

model ingredient_substitutions {
  substituting_ingredient_id String      @db.Uuid
  substituted_ingredient_id  String      @db.Uuid
  substituting_quantity      Float
  substituted_quantity       Float
  substituting_unit          String
  substituted_unit           String
  additional_info            String?
  substituting_ingredient    ingredients @relation("SubstitutingIngredient", fields: [substituting_ingredient_id], references: [ingredient_id])
  substituted_ingredient     ingredients @relation("SubstitutedIngredient", fields: [substituted_ingredient_id], references: [ingredient_id])

  @@id([substituting_ingredient_id, substituted_ingredient_id])
}
